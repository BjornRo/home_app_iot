version: '3.9'

# TODO make actual production docker file
# https://docs.docker.com/compose/production/
# https://docs.docker.com/compose/extends/#different-environments

x-tz-volume: &tz-volumes
  volumes:
    - /etc/timezone:/etc/timezone:ro
    - /etc/localtime:/etc/localtime:ro

x-redis-db-sensor-env: &redis-db-env
  environment:
    - DBSENSOR=0
    - DBUSRCACHE=1

x-cert-volume: &cert-volumes
  volumes:
    - ./appdata/certbot/letsencrypt:/etc/letsencrypt
    - ./appdata/certbot/www:/var/www/certbot

services:
  # mqtt:
  #   container_name: mqtt
  #   restart: always
  #   build: ./mqtt
  #   ports:
  #     - 1883:1883

  rejson:
    container_name: rejson
    build:
      context: ./rejson
      dockerfile: rejson.dockerfile
    restart: always
    <<: *tz-volumes
    ports:
      - 6379:6379
    command: redis-server --loadmodule librejson.so

  # sensor_logger_db:
  #   container_name: sensor_logger_db
  #   <<: *redis-db-env
  #   <<: *tz-volumes
  #   volumes:
  #     - ./sensor_logger_db:/app
  #     - ./appdata/db:/db
  #   restart: always
  #   depends_on:
  #     - service_layer_api
  #   build:
  #     context: ./sensor_logger_db
  #     dockerfile: sensor_logger_db.dockerfile
  #   command: python3 main.py --verbose

  # sensor_mqtt_listener:
  #   container_name: sensor_mqtt_listener
  #   <<: *redis-db-env
  #   <<: *tz-volumes
  #   volumes:
  #     - ./sensor_mqtt_listener:/app
  #   restart: always
  #   build:
  #     context: ./sensor_mqtt_listener
  #     dockerfile: sensor_mqtt_listener.dockerfile
  #   depends_on:
  #     - service_layer_api
  #   command: python3 main.py --verbose

  sensor_remote_fetch:
    container_name: sensor_remote_fetch
    <<: *redis-db-env
    <<: *tz-volumes
    <<: *cert-volumes
    volumes:
      - ./appdata/certbot/letsencrypt:/etc/letsencrypt
      - ./sensor_remote_fetch:/app
    restart: always
    ports:
      - 42661:42661
    build:
      context: ./sensor_remote_fetch
      dockerfile: sensor_remote_fetch.dockerfile
    depends_on:
      - service_layer_api
    command: python3 main.py --verbose

  service_layer_api:
    container_name: service_layer_api
    restart: always
    build:
      context: ./service_layer_api
      dockerfile: service_layer_api.dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000 --log-level warning
    <<: *redis-db-env
    <<: *tz-volumes
    volumes:
      - ./appdata/db:/db
      - ./service_layer_api:/app
    ports:
      - 9090:8000
    depends_on:
      - rejson

  # public_api:
  #   container_name: public_api
  #   restart: always
  #   build:
  #     context: ./public_api
  #     dockerfile: public_api.dockerfile
  #   command: uvicorn main:app --reload --host 0.0.0.0 --port 8000 #--log-level critical
  #   <<: *redis-db-env
  #   <<: *tz-volumes
  #     - ./appdata/db:/db
  #     - ./public_api:/app
  #   ports:
  #     - 8000:8000
  #   depends_on:
  #     - sensor_mqtt_listener


  # ddns:
  #   container_name: ddns
  #   restart: always
  #   build:
  #     context: ./ddns
  #     dockerfile: ddns.dockerfile
  #   command: python3 main.py wlan0 --hrs 2
  #   network_mode: host

  # nginx:
  #   container_name: nginx
  #   restart: always
  #   build: ./nginx
  #   <<: *cert-volumes
  #   ports:
  #     - 80:80
  #     - 443:443
  #   depends_on:
  #     - fastapi
  #   command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # certbot:
  #   image: certbot/certbot:latest
  #   container_name: certbot
  #   restart: always
  #   <<: *cert-volumes
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew -n --webroot --webroot-path /var/www/certbot; sleep 12h & wait $${!}; done;'"