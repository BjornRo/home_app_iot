version: '3.9'

# TODO make actual production docker file
# https://docs.docker.com/compose/production/
# https://docs.docker.com/compose/extends/#different-environments


x-redis-db-sensor-env: &redis-db-env
  environment:
    - DBSENSOR=0
    - DBUSRCACHE=1

# Only use if there are no other "volumes:" specified.
x-tz-volume: &tz-volumes
  volumes:
    - /etc/timezone:/etc/timezone:ro
    - /etc/localtime:/etc/localtime:ro

x-cert-volume: &cert-volumes
  volumes:
    - ./appdata/certbot/letsencrypt:/etc/letsencrypt
    - ./appdata/certbot/www:/var/www/certbot

services:
  # mqtt:
  #   container_name: mqtt
  #   build: ./mqtt
  #   restart: unless-stopped
  #   ports:
  #     - 1883:1883

  rejson:
    container_name: rejson
    build:
      context: ./rejson
      dockerfile: rejson.dockerfile
    <<: *tz-volumes
    ports:
      - 6379:6379
    restart: unless-stopped
    command: [sh, -c, "rm -f /data/dump.rdb && redis-server --loadmodule librejson.so --save '' --appendonly no"]


  # app_schedule_tasks:
  #   container_name: app_schedule_tasks
  #   restart: unless-stopped
  #   build:
  #     context: ./app_schedule_tasks
  #     dockerfile: app_schedule_tasks.dockerfile
  #   env_file: .env
  #   <<: *redis-db-env
  #   volumes:
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./appdata/db:/db
  #     - ./app_schedule_tasks:/app
  #   depends_on:
  #     - service_layer_api
  #   command: python3 main.py --verbose

  sensor_mqtt_listener:
    container_name: sensor_mqtt_listener
    build:
      context: ./sensor_mqtt_listener
      dockerfile: sensor_mqtt_listener.dockerfile
    env_file: .env
    <<: *redis-db-env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./sensor_mqtt_listener:/app
    depends_on:
      - service_layer_api
    restart: unless-stopped
    command: python3 main.py --debug

  mqtt_net_bridge_srv:
    container_name: mqtt_net_bridge_srv
    build:
      context: ./mqtt_net_bridge_srv
      dockerfile: mqtt_net_bridge_srv.dockerfile
    env_file: .env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./appdata/certbot/letsencrypt:/etc/letsencrypt
      - ./pymodules:/app/pymodules
      - ./mqtt_net_bridge_srv:/app
    ports:
      - 42668:42668
    depends_on:
      - service_layer_api
    restart: unless-stopped
    command: python main.py --port 42668 --debug

  # sensor_remote_fetch:
  #   container_name: sensor_remote_fetch
  #   build:
  #     context: ./sensor_remote_fetch
  #     dockerfile: sensor_remote_fetch.dockerfile
  #   env_file: .env
  #   <<: *redis-db-env
  #   volumes:
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./appdata/certbot/letsencrypt:/etc/letsencrypt
  #     - ./pymodules:/app/pymodules
  #     - ./sensor_remote_fetch:/app
  #   ports:
  #     - 42661:42661
  #   depends_on:
  #     - service_layer_api
  #   restart: unless-stopped
  #   command: python3 main.py --port 42661 --debug

  service_layer_api:
    container_name: service_layer_api
    build:
      context: ./service_layer_api
      dockerfile: service_layer_api.dockerfile
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000 --log-level warning
    <<: *redis-db-env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./pymodules:/app/pymodules
      - ./appdata/db:/db
      - ./service_layer_api:/app
    ports:
      - 9090:8000
    depends_on:
      - rejson
    restart: unless-stopped

  public_api:
    container_name: public_api
    build:
      context: ./public_api
      dockerfile: public_api.dockerfile
    env_file: .env
    #command: uvicorn main:app --reload --host 0.0.0.0 --port 8000 --log-level debug
    command: python3 main.py --reload --port 8443 --verbose
    <<: *redis-db-env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./pymodules:/app/pymodules
      - ./appdata/certbot/letsencrypt:/etc/letsencrypt
      - ./appdata/db:/db
      - ./public_api:/app
    ports:
      - 8443:8443
    depends_on:
      - service_layer_api
    restart: unless-stopped

  # ddns:
  #   container_name: ddns
  #   build:
  #     context: ./ddns
  #     dockerfile: ddns.dockerfile
  #   env_file: .env
  #   restart: unless-stopped
  #   command: python3 main.py wlan0 --hrs 2
  #   network_mode: host

  # nginx:
  #   container_name: nginx
  #   build: ./nginx
  #   <<: *cert-volumes
  #   ports:
  #     - 80:80
  #     - 443:443
  #   depends_on:
  #     - fastapi
  #   restart: unless-stopped
  #   command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # certbot:
  #   image: certbot/certbot:latest
  #   container_name: certbot
  #   <<: *cert-volumes
  #   restart: unless-stopped
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew -n --webroot --webroot-path /var/www/certbot; sleep 12h & wait $${!}; done;'"